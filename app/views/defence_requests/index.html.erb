<div class="row">
  <h1>CSO DASHBOARD</h1>
</div>
<div class="row new_defence_request">
  <%= link_to t('new_defence_request'), new_defence_request_path, class: 'btn btn-default' %>
</div>
<div class="row">
  <table class="table table-striped table-bordered defence_requests">
    <thead>
    <tr>
      <th>#</th>
      <th><%= t('solicitor_type') %></th>
      <th><%= t('solicitor_name') %></th>
      <th><%= t('solicitor_firm') %></th>
      <th><%= t('scheme') %></th>
      <th><%= t('phone_number') %></th>
      <th><%= t('detainee_surname') %></th>
      <th><%= t('detainee_first_name') %></th>
      <th><%= t('gender') %></th>
      <th><%= t('adult') %></th>
      <th><%= t('date_of_birth') %></th>
      <th><%= t('appropriate_adult') %></th>
      <th><%= t('custody_number') %></th>
      <th><%= t('allegations') %></th>
      <th><%= t('comments') %></th>
      <th><%= t('time_of_arrival') %></th>
    </tr>
    </thead>
    <tbody>
    <%= render partial: 'table_body' %>
    </tbody>
  </table>
</div>
<script>
  $(document).ready(function () {
    WebSocketTest();
  });

  function WebSocketTest() {

    if ("WebSocket" in window && browserOK()) {
      // the browser does support WebSockets
      refreshWithWebSocket();
      console.log('the browser does support WebSockets');
    }
    else {
      // the browser doesn't support WebSockets
      setInterval(refreshPartial, 3000);
      console.log('the browser doesnt support WebSockets');
    }
  }

  function refreshWithWebSocket() {
    //    // connect to server like normal
    if (!window.location.origin) {
      window.location.origin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port : '');
    }
    var host = location.origin.replace(/^http:\/\//, '');

    // THIS DOESNT WORK ON HEROKU
    var dispatcher = new WebSocketRails(host + '/websocket');
    // THIS WORKS LOCALLY
    // var dispatcher = new WebSocketRails('localhost:3001/websocket');

    // subscribe to the channel
    var channel = dispatcher.subscribe('defence_request_changes');

    // bind to a channel event
    channel.bind('defence_request_change', function (data) {
      var current_count = $(".defence_requests tbody tr").length
      var defence_request_html = "<td>" +
          current_count +
          "</td><td>" +
          data.solicitor_type +
          "</td><td>" +
          data.solicitor_name +
          "</td><td>" +
          data.solicitor_firm +
          "</td><td>" +
          data.scheme +
          "</td><td>" +
          data.phone_number +
          "</td><td>" +
          data.detainee_surname +
          "</td><td>" +
          data.detainee_first_name +
          "</td><td>" +
          data.gender +
          "</td><td>" +
          data.adult +
          "</td><td>" +
          data.date_of_birth +
          "</td><td>" +
          data.appropriate_adult +
          "</td><td>" +
          data.custody_number +
          "</td><td>" +
          data.allegations +
          "</td><td>" +
          data.comments +
          "</td><td>" +
          data.time_of_arrival +
          "</td>"
      $("#dr_" + data.id).html(defence_request_html)
      $("#dr_" + data.id).effect("highlight", 1500);
    });
  }

  // calls action refreshing the partial
  function refreshPartial() {
    $.ajax({
      url: "defence_requests/refresh_part"
    })
//  console.log('now!');
  }

  function browserOK() {
    var browserString = navigator.sayswho
    var ok = false
    //Firefox versions above 12
    if (browserString.split(" ")[0] == 'Firefox' && Number(browserString.split(" ")[1]) > 12) {
      ok = true
    }
    //Internate Explorer above 9
    if (browserString.split(" ")[0] == 'MSIE' && Number(browserString.split(" ")[1]) > 9) {
      ok = true
    }
    //Chrome above 16
    if (browserString.split(" ")[0] == 'Chrome' && Number(browserString.split(" ")[1]) > 16) {
      ok = true
    }
    return ok
  }

  navigator.sayswho = (function () {
    var ua = navigator.userAgent, tem,
        M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if (/trident/i.test(M[1])) {
      tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
      return 'IE ' + (tem[1] || '');
    }
    if (M[1] === 'Chrome') {
      tem = ua.match(/\bOPR\/(\d+)/)
      if (tem != null) return 'Opera ' + tem[1];
    }
    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
    if ((tem = ua.match(/version\/(\d+)/i)) != null) M.splice(1, 1, tem[1]);
    return M.join(' ');
  })();


</script>